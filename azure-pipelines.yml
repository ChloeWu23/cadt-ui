trigger:
  - docker
stages:
  - stage: Builddev
    displayName: Build Dev image
    jobs:
      - job: Buildjob
        #condition: eq(variables['Build.SourceBranchName'],variables['dockerBranchName'])
        displayName: Build-dev
        pool:
          vmImage: ubuntu-latest
        steps:
            - task: Bash@3
              name: "ADO_variables"
              inputs:
                targetType: "inline"
                script: |
                    tagvalue="$(sed 's/.*"version": "\(.*\)".*/\1/;t;d' ./package.json)"
                    echo "Setting variable code_version"
                    echo "##vso[task.setvariable variable=code_version]$tagvalue"
                    echo "##vso[task.setvariable variable=code_version_out;isOutput=true]$tagvalue"
                    echo $code_version_out
                    echo $code_version
                    echo "Code Version is: $code_version"

                    
            - task: Docker@2 # Pushing the Docker Image inside the Container Registry
              inputs:
                containerRegistry: "sandboxcadtACRdev" # Adding Container Registry Name
                repository: "app-cadt-develop" # Giving Name to the Repository
                command: "buildAndPush"
                Dockerfile: "$(System.DefaultWorkingDirectory)/Dockerfile"
                tags:  $(code_version)_$(Build.BuildId)

  - stage: Deploydev
    displayName: Deploy Dev Application
    jobs:
        - job: Deploy
          # condition: eq(variables['Build.SourceBranchName'],variables['developBranchName'])
          variables:
            - name: code_version_out
              value: $[ stageDependencies.Builddev.Buildjob.outputs['ADO_variables.code_version_out'] ]
          displayName: Deploy Application in Cluster
          steps:
            # - checkout: Helmchart
            - task: Bash@3
              inputs:
                targetType: "inline"
                script: |
                  echo "Full tag is: $(code_version_out)_$(Build.BuildId)"
                  echo $(code_version_out)
            - task: HelmInstaller@0 # Installing Helm in the Client
              inputs:
                helmVersion: "3.9.0"
                installKubectl: true
            - task: HelmDeploy@0 # Deploying the k8s using Helm
              inputs:
                azureSubscription: "sandbox-cadt-dev-northeurope-rg-master"
                azureResourceGroup: "sandbox-cadt-dev-northeurope-rg-master"
                kubernetesCluster: "sandbox-cadt-aks-dev-master"
                namespace: "develop"
                command: "upgrade"
                chartType: "FilePath"
                chartPath: "cadt-ui"
                chartVersion: "1.0"
                releaseName: "cadt-ui-develop"
                valueFile: "cadt-ui/values.yaml"
                waitForExecution: true
                # arguments: --install
                arguments: "--set image.tag=$(code_version_out)_$(Build.BuildId)"
            
